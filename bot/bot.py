# import time

import telebot
from telebot import types
bot = telebot.TeleBot('7715803066:AAHRpvNmzXN3OEj_B8H_NJtr0L3WgsL6cvw')

# @bot.message_handler(commands=['help', 'start'])
# def send_welcome(message):
    # msg = bot.reply_to(message, """\
# –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ü—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.
# –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?
#""")
    #bot.register_next_step_handler(msg, process_name_step)

 
# user_dict = {}
# users_actions = {1:[...], 2:[...]}

# class User:
    # def __init__(self, name):
        # self.name = name
        # self.city = None
        
# def process_name_step(message):
    # try:
        # chat_id = message.chat.id
        # name = message.text
        # user = User(name)
        # user_dict[chat_id] = user
        # msg = bot.reply_to(message, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?')
        # bot.register_next_step_handler(msg, process_city_step)
    # except Exception as e:
        # bot.reply_to(message, 'oooops')

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
# bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
# bot.load_next_step_handlers()

#–ø—Ä–∏–º–µ—Ä –≤–∑—è—Ç: https://github.com/eternnoir/pyTelegramBotAPI/blob/master/examples/step_example.py


@bot.message_handler(commands=['start'])
def start_message(message):
    # bot.send_photo(message.chat.id, photo=open('./mao.jpeg', 'rb'), caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key1=types.KeyboardButton("‚ùÑÔ∏è‚òî–ü–æ–≥–æ–¥–∞‚òÄÔ∏è‚òÅÔ∏è")
    key2=types.KeyboardButton("üåç–ì–æ—Ä–æ–¥")
    key3=types.KeyboardButton("‚úçüèª–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    key4=types.KeyboardButton("‚Ü©Ô∏è–î—Ä—É–≥–æ–µ")

    markup.add(key1, key2, key3, key4)

    bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup = markup )


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == '‚ùÑÔ∏è‚òî–ü–æ–≥–æ–¥–∞‚òÄÔ∏è‚òÅÔ∏è':
            bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:')

        elif message.text == '‚úçüèª–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
            bot.send_message(message.chat.id,f'{message.from_user.first_name}, –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:')

        elif message.text == 'üåç–ì–æ—Ä–æ–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            key1=types.KeyboardButton("–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫")
            key2=types.KeyboardButton("–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä")
            back=types.KeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥")
            markup.add(key1, key2, back)

            bot.send_message(message.chat.id, 'üåç–ì–æ—Ä–æ–¥', reply_markup=markup)

        elif message.text == '‚Ü©Ô∏è–î—Ä—É–≥–æ–µ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            key1=types.KeyboardButton("–û –±–æ—Ç–µ")
            back=types.KeyboardButton("‚Ü©Ô∏è–ù–∞–∑–∞–¥")
            markup.add(key1, back)

            bot.send_message(message.chat.id, '‚Ü©Ô∏è–î—Ä—É–≥–æ–µ', reply_markup=markup)

        elif message.text == '‚Ü©Ô∏è–ù–∞–∑–∞–¥':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            key1=types.KeyboardButton("‚ùÑÔ∏è‚òî–ü–æ–≥–æ–¥–∞‚òÄÔ∏è‚òÅÔ∏è")
            key2=types.KeyboardButton("üåç–ì–æ—Ä–æ–¥")
            key3=types.KeyboardButton("‚úçüèª–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            key4=types.KeyboardButton("‚Ü©Ô∏è–î—Ä—É–≥–æ–µ")

            markup.add(key1, key2, key3, key4)
            bot.send_message(message.chat.id, '‚Ü©Ô∏è–ù–∞–∑–∞–¥', reply_markup=markup)


bot.infinity_polling()
        

        


    # markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # key1=types.KeyboardButton("–ü–æ–≥–æ–¥–∞")
    # markup.add(key1)
    # bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω–∞–¥–æ', reply_markup=markup) 

# —Ö–æ—á—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, —Ç—É–ø–ª—é –∫–∞–∫
# @bot.message_handler()
# def info(message):
    # if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        # bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}')

# @bot.message_handler(content_types='text')
# def message_reply(message):
#   if message.text=="–ü–æ–≥–æ–¥–∞":
 #       markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
  #      key2=types.KeyboardButton("test1")
   #     markup.add(key2)
    #    bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω–∞–¥–æ',reply_markup=markup)
    # elif message.text=="test1":
     #   bot.send_message(message.chat.id,'https://openweathermap.org/')